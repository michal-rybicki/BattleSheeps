package threee.battlesheeps;

import org.json.JSONException;
import org.json.JSONObject;
import java.util.Random;

public class Game
{
	//POLA PUBLICZNE--------------------------------------------------------------------------------

	//aktualny wynik wilka
	public int WolfScore;

	//aktualny wynik usera
	public int UserScore;

	//do celow diagnostycznych
	public String testzapisywania;

	//nazwa aktualnego uzytkownika
	public String user;

	//wskaznik do tablicy z wartosciami z planszy
	//0 - puste pole w ktorego nikt nie przeszukiwal
	//1, 2, 3, 4 - pole zajete przez nieodkryta owce ze stada o okreslonej liczebnosci
	//5 - puste pole przeszukane
	//6 - pole ze szczatkami owcy rozszarpanej przez wilka lub znalezionej przez usera
	//!!! Nie korzysta z ramki. Pola uzytkowe numerujemy od 1 do s0 podanego dla konstruktora!!!!
	int board[][];

	//wskaznik do tablicy z wartosciami poczotkowymi planszy
	//0 - puste pole
	//1, 2, 3, 4 - pole zajete przez owce ze stada o okreslonej liczebnosci
	//5 - ramka, pola przy krawedzi tablicy
	int startingBoard[][];

	//wskaznik na tablice wskazujaca na uratowane przez usera owce
	//0 - brak uratowanej owcy (moze byc tez zjedzona lub nieodnaleziona)
	//1 - uratowana owca
	int savedSheeps[][];

	//POLA PRYWATNE---------------------------------------------------------------------------------
	private int numer_stada;
	private int s;// faktyczny rozmiar planszy, plansza do gry dla usera ma rozmiar s-2
	private int s1;
	private Random rand = new Random();//do losowania
	protected Table plansza;//obiekt zawiera plansze
	private First First;//obiekt nadzorujacy stado owiec
	private Second Second;//obiekt nadzorujacy stado owiec
	private Third Third;//obiekt nadzorujacy stado owiec
	private Fourth Fourth;//obiekt nadzorujacy stado owiec
	private boolean poprzednia_trafiona;//do algorytmu wilka
	private boolean zostal_niespr_sasiad;//do algorytmu wilka
	private int ile_sprawdzonych;//do algorytmu wilka
	private int a1, a2, b1, b2, c1, c2, d1, d2;//do algorytmu wilka
	private int liczba1, liczba2, stara_liczba1, stara_liczba2;//do algorytmu wilka
	private int l_owiec; /// liczba trafionych owiec w danym stadzie
	private int docelowa_l_owiec;
	private JSONObject temp;
	private int krokiWilka[][];
	private int postepWilka;

	//METODY PUBLICZNE-----------------------------------------------------------------------------

	//Konstruktor - ustawia nowa rozgrywke dla usera
	//s0 - rozmiar panszy do gry, pola numerowane od (1,1) do (s0,s0)
	//user0 - nazwa uzytkownika
	public Game(int s0, String user0)
	{
		newGame(s0,user0);
	}

	//Robi to samo co konstruktor, ustawia nowa rozgrywke dla istniejacego usera
	//s0 - rozmiar panszy do gry, pola numerowane od (1,1) do (s0,s0)
	//user0 - nowa nazwa uzytkownika
	public void newGame(int s0, String user0)
	{
		s=s0+2;
		user=user0;
		wejscie();
	}

	//Robi to samo co konstruktor, ustawia nowa rozgrywke dla istniejacego usera
	//s0 - rozmiar panszy do gry, pola numerowane od (1,1) do (s0,s0)
	public void newGame(int s0)
	{
		s=s0+2;
		wejscie();
	}

	//Wskazuje pole o wspolrzednych (x,y) jako ruch gracza,
	// automatycznie nastepuje odpowiedz wilka
	public void fullMove(int x, int y)
	{
		ruch_gracza(x,y);
		wolfMove();
	}

	//Wskazuje pole o wspolrzednych (x,y) jako ruch gracza,
	// nie nastepuje odpowiedz programu
	public void playerMove(int x, int y)
	{
		ruch_gracza(x,y);
	}

	//Generuje tylko ruch wilka
	public void wolfMove()
	{
		//algorytm_wilka1701();
		algorytm_wilka5454();
	}

	//Zapisuje stan gry w tempie (obiekt klasy JSON)
	public void saveToTemp()
	{
		temp=this.zamienNaJSON();
	}

	//Wczytuje gre z tempa
	public void loadFromTemp()
	{
		wczytajZJSON(temp);
	}

	//Zapisuje na serwerze stan obiektu klasy gra
	//w postaci obiektu klasy JSON, pod identyfikatorem user
	public void saveToServer()
	{
		Writer.save(this);
	}

	//Wczytuje gre z serwera o identyfikatorze user0
	public void loadFromServer(String user0)
	{
		GameReader czytnik=new GameReader();
		JSONObject zapis=czytnik.load(user0);
		wczytajZJSON(zapis);
	}

	//Wczytuje gre z serwera o identyfikatorze aktualnego usera
	public void loadFromServer()
	{
		GameReader czytnik=new GameReader();
		JSONObject zapis=czytnik.load(user);
		wczytajZJSON(zapis);
	}


	//METODY CHRONIONE ZWIAZANE Z PRZESYLANIEM OBIEKTOW JSON

	//Zwaraca obiekt JSON z e wszystkimi polami obiektu klasy Game
	protected JSONObject zamienNaJSON()
	{
		JSONObject wynik=new JSONObject();

		try
		{
			//pojedyncze zmienne
			wynik.put("id",user);
			wynik.put("test",42);
			wynik.put("numer_stada", numer_stada);
			wynik.put("WolfScore", WolfScore);
			wynik.put("UserScore", UserScore);
			wynik.put("s", s);
			wynik.put("s1",s1);
			wynik.put("a1",a1);
			wynik.put("a2",a2);
			wynik.put("b1",b1);
			wynik.put("b2",b2);
			wynik.put("c1",c1);
			wynik.put("c2",c2);
			wynik.put("d1",d1);
			wynik.put("d2",d2);
			wynik.put("liczba1",liczba1);
			wynik.put("liczba2",liczba2);
			wynik.put("stara_liczba1",stara_liczba1);
			wynik.put("stara_liczba2",stara_liczba2);
			wynik.put("l_owiec",l_owiec);
			wynik.put("docelowa_l_owiec",docelowa_l_owiec);
			wynik.put("poprzednia_trafiona",poprzednia_trafiona);
			wynik.put("zostal_niespr_sasiad",zostal_niespr_sasiad);
			wynik.put("ile_sprawdzonych",ile_sprawdzonych);

			//obiekty first, second roznia sie tylko zmienną pozostale_owce
			wynik.put("First",First.pozostale_owce);
			wynik.put("Second",Second.pozostale_owce);
			wynik.put("Third",Third.pozostale_owce);
			wynik.put("Fourth",Fourth.pozostale_owce);

			//plansza
			wynik.put("size",plansza.size);
			for (int i=1;i<s-1;i++)
				for (int j=1;j<s-1;j++)
				{
					wynik.put(String.valueOf(i)+String.valueOf(j),plansza.Kratka[i][j]);
					wynik.put("Startowe"+String.valueOf(i)+String.valueOf(j),startingBoard[i][j]);
					wynik.put("Uratowane"+String.valueOf(i)+String.valueOf(j),savedSheeps[i][j]);
				}
			//plansza

			testzapisywania="OK";
		}
		catch (JSONException e)
		{
			testzapisywania="NIE OK";
		}
		return wynik;
	}

	//ustawia pola obiektu, ktory wywowluje metode na podstawie danych z obiektu typu JSON
	protected void wczytajZJSON(JSONObject dane)
	{
		try
		{
			//pojedyncze zmienne
			user=dane.getString("id");
			numer_stada=dane.getInt("numer_stada");
			WolfScore=dane.getInt("WolfScore" );
			UserScore=dane.getInt("UserScore" );
			s=dane.getInt("s");
			s1=dane.getInt("s1");
			a1=dane.getInt("a1");
			a2=dane.getInt("a2");
			b1=dane.getInt("b1");
			b2=dane.getInt("b2");
			c1=dane.getInt("c1");
			c2=dane.getInt("c2");
			d1=dane.getInt("d1");
			d2=dane.getInt("d2");
			liczba1=dane.getInt("liczba1");
			liczba2=dane.getInt("liczba2");
			stara_liczba1=dane.getInt("stara_liczba1");
			stara_liczba2=dane.getInt("stara_liczba2");
			l_owiec=dane.getInt("l_owiec");
			docelowa_l_owiec=dane.getInt("docelowa_l_owiec");
			poprzednia_trafiona=dane.getBoolean("poprzednia_trafiona");
			zostal_niespr_sasiad=dane.getBoolean("zostal_niespr_sasiad");
			ile_sprawdzonych=dane.getInt("ile_sprawdzonych");

			//obiekty first, second roznia sie tylko zmienną pozostale_owce
			First.pozostale_owce=dane.getInt("First");
			Second.pozostale_owce=dane.getInt("Second");
			Third.pozostale_owce=dane.getInt("Third");
			Fourth.pozostale_owce=dane.getInt("Fourth");

			//plansza
			plansza.size=dane.getInt("size");
			for (int i=1;i<s-1;i++)
				for (int j=1;j<s-1;j++)
				{
					plansza.Kratka[i][j]=dane.getInt(String.valueOf(i)+String.valueOf(j));
					startingBoard[i][j]=dane.getInt("Startowe"+String.valueOf(i)+String.valueOf(j));
					savedSheeps[i][j]=dane.getInt("Uratowane"+String.valueOf(i)+String.valueOf(j));
				}
	}
		catch (JSONException e)
	{

	}
	}

	//METODY PRYWATNE-------------------------------------------------------------------------------
	private void wejscie()
	{
		//generowanie planszy i morskiego tla
		//System.out.println("W I T A J   W   G R Z E   W   S T A T K I");
		//System.out.println();
		//System.out.print("Podaj dlugosc boku kwadratowej planszy do gry:");
		s1=s-1;
		Ship.s=this.s;
		plansza = new Table(s);
		First = new First(1);
		Second = new Second(2);
		Third = new Third(3);
		Fourth = new Fourth(4);
		UserScore=0;
		WolfScore=0;


		//inicjalizuje wszystko, zeby nie krzyczalo bledow
		///potrzebne do sztucznej inteligencji:
		a1=1; a2=1; b1=1; b2=1; c1=1; c2=1; d1=1; d2=1;
		liczba1=1; liczba2=1; stara_liczba1=1; stara_liczba2=1;
		l_owiec=0; /// liczba trafionych owiec w danym stadzie
		docelowa_l_owiec=0;/// dzieki niej poinformuję Compa, kiedy stado zostanie zatopione już całkiem, komputer ustawi poprzednia_trafiona na true i zrozumie, ze nie ma juz co szukac kolejnych owiec, trzeba strzelac gdzie indziej
		//int maks_owiec=4; /// maksymalna liczba owiec, jaka moze byc do trafienia w stadzie
		///jesli poczwórne zostanie zatopione, to bd wynosila 3 itd.
		//int m1=1, m2=2, m3=3, m4=4; /// zmienne pomocnicze w ustalaniu, jaki teraz jest maks_owiec;

		Fourth.tworzenie(plansza.Kratka);
		Third.tworzenie(plansza.Kratka);
		Second.tworzenie(plansza.Kratka);
		First.tworzenie(plansza.Kratka);

		ile_sprawdzonych=0;
		poprzednia_trafiona=true; ///zmienna mowiaca o tym, czy juz oblecielismy wszystkie pola wokol zatapianego statku
		///na poczatek ustawiam true- nie mam zadnych niedokonczonych okretow, czysta karta na starcie
		zostal_niespr_sasiad=false;///zmienna mowiaca o tym, czy zostalo jeszcze wokol danego masztu jakies niesprawdzone pole
		///wiemy dzieki niej, czy mozna brac sie juz za nastepny maszt i skakac dookola niego w poszukiwaniu kolejnych masztow

		board=plansza.Kratka;
		savedSheeps=new int[s][s];
		startingBoard=new int[s][s];
		for (int i=0; i<s; i++)
			for (int j=0; j<s; j++)
			{
				startingBoard[i][j]=plansza.Kratka[i][j];
				savedSheeps[i][j]=0;
			}

		//losowanie krokow wilka
		krokiWilka=new int[s*s][2];
		postepWilka=0;
		for (int i=0; i<s*s; i++)
		{
			krokiWilka[i][0]=rand.nextInt(s-2)+1;
			krokiWilka[i][1]=rand.nextInt(s-2)+1;
		}
	}

	//ruch gracza------------------------------------------------------------------------------------
	private void ruch_gracza(int x, int y)
	{
		x++;
		y++;
		//int s1=s--;
		//wejscie();
		///liczba_ruchow=0;


		{
			/*
			System.out.print("Twoj ruch (liczba, liczba): ");
			x=scan.nextInt();
			y=scan.nextInt();
			while(x>s || x<1 || y>s || y<1)
			{
				System.out.println("Niepoprawne dane!");
				System.out.print("Wprowadz je jeszcze raz: ");
				x=scan.nextInt();
				y=scan.nextInt();
			}
			*/
			numer_stada = plansza.Kratka[x - 1][y - 1];

			switch (numer_stada) {
				case 0: {
					//System.out.println("Pudlo!");
					plansza.Kratka[x - 1][y - 1] = 5;
					break;
				}
				case 1: {
					First.trafienie();
					UserScore++;
					plansza.Kratka[x - 1][y - 1] = 6;
					savedSheeps[x-1][y-1]=1;
					break;
				}
				case 2: {
					Second.trafienie();
					UserScore++;
					plansza.Kratka[x - 1][y - 1] = 6;
					savedSheeps[x-1][y-1]=1;
					break;
				}
				case 3: {
					Third.trafienie();
					UserScore++;
					plansza.Kratka[x - 1][y - 1] = 6;
					savedSheeps[x-1][y-1]=1;
					break;
				}
				case 4: {
					Fourth.trafienie();
					UserScore++;
					plansza.Kratka[x - 1][y - 1] = 6;
					savedSheeps[x-1][y-1]=1;
					break;
				}
				default: // czyli 5 lub 6
				{
					//System.out.println("To juz bylo!");
				}
			}
		}
	}

	//ruch wilka------------------------------------------------------------------------------------
	private void algorytm_wilka1701()
	{
		int x,y;
		if(poprzednia_trafiona)
		{
			do
			{
				x = rand.nextInt(s - 2);
				y = rand.nextInt(s - 2);
				x++;
				y++;
				stara_liczba1 = x;
				stara_liczba2 = y;
			}
			while (plansza.Kratka[x][y] == 5 || plansza.Kratka[x][y] == 6);
		}
		else
		{
			int licznik=0;

			do
			{

				x = stara_liczba1;
				y = stara_liczba2;
				if (licznik==0) x--;
				if (licznik==1) x++;
				if (licznik==2) y--;
				if (licznik==3) y++;
				licznik++;
			}
			while (plansza.Kratka[x][y] == 5 || plansza.Kratka[x][y] == 6 || licznik==5);

			if (licznik==5)
			{
				do
				{
					x = rand.nextInt(s - 2);
					y = rand.nextInt(s - 2);
					x++;
					y++;
					stara_liczba1 = x;
					stara_liczba2 = y;
					poprzednia_trafiona=true;
				}
				while (plansza.Kratka[x][y] == 5 || plansza.Kratka[x][y] == 6);
			}
		}

		if (plansza.Kratka[x][y]==0)
		{
			plansza.Kratka[x][y]=5;
		}
		else if (plansza.Kratka[x][y]==1)
		{
			plansza.Kratka[x][y]=6;
			poprzednia_trafiona=true;
			WolfScore++;
		}
		else if (plansza.Kratka[x][y]==2)
		{
			plansza.Kratka[x][y]=6;
			Second.trafienie();
			WolfScore++;
			if (Second.pozostale_owce==0)
				poprzednia_trafiona=true;
			else
				poprzednia_trafiona=false;
		}
		else if (plansza.Kratka[x][y]==3)
		{
			plansza.Kratka[x][y]=6;
			Third.trafienie();
			WolfScore++;
			if (Third.pozostale_owce==0)
				poprzednia_trafiona=true;
			else
			{
				poprzednia_trafiona = false;
				stara_liczba1 = x;
				stara_liczba2 = y;
			}
		}
		else if (plansza.Kratka[x][y]==4)
		{

			plansza.Kratka[x][y]=6;
			Fourth.trafienie();
			WolfScore++;
			if (Fourth.pozostale_owce==0)
				poprzednia_trafiona=true;
			else
			{
				poprzednia_trafiona = false;
				stara_liczba1 = x;
				stara_liczba2 = y;
			}
		}
	}

	private void algorytm_wilka5454()
	{
					///-----------------------------------------------------------------------------------------------------------------------------------------------------
			//System.out.println("Ruch przeciwnika:");
			Random rand = new Random();
			int x,y;
			if(poprzednia_trafiona)///jesli poprzednie stado jest juz calkiem odkryte, szukam nowego punktu zaczepienia
			{
				do
				{
					x = rand.nextInt(s - 2);
					y = rand.nextInt(s - 2);
					x++;
					y++;

				}
				while(plansza.Kratka[x][y]==5 || plansza.Kratka[x][y]==6);///dopoki wybierane jest pole, o ktore juz kiedys pytalam, bo Comp musi pamietac, ktore pola juz sprawdzal i nie pytac o nie wiecej niz raz
				if(plansza.Kratka[x][y]!=0) ///Gdy trafię, to przestawiam pop.._traf.. na false, bo odkryłam nowe stado, ktore dopiero będę odkrywala
				//tu juz wiadomo, ze wartosci od 0 do 4 wlacznie, 5 i 6 wykluczyl while
				{
					poprzednia_trafiona=false;
					docelowa_l_owiec=plansza.Kratka[x][y];///poki jeszcze nie zmienilam wartosci na 5 lub 6 -> zapamietuje, zeby poinformowac komp., gdy juz bedzie stado odkryte

				}
				liczba1=x;
				liczba2=y;
				///a jesli spelnilo ifa, to jeszcze nie ustawiam na 6, dopiero po wykorzystaniu danych moge zmienic wartosc na 5
			}
			else /// musimy trafiac rozumnie, przy juz trafionych szukamy kolejnych owiec
			{
				if(ile_sprawdzonych==0) ///determinuje, wokol ktorej trafionej owcy szukam nastepnych, gdy jedna jest obszukana, to sprawdzam nastepna
				{
					stara_liczba1=a1;
					stara_liczba2=a2;
				}
				if(ile_sprawdzonych==1)
				{
					stara_liczba1=b1;
					stara_liczba2=b2;
				}
				if(ile_sprawdzonych==2)
				{
					stara_liczba1=c1;
					stara_liczba2=c2;
				}
				if(ile_sprawdzonych==3)
				{
					stara_liczba1=d1;
					stara_liczba2=d2;
				}

				zostal_niespr_sasiad=false; /// Jesli znajde jeszcze jakies pole wokol owcy, ktore dopiero bede oznaczala piątką, to zmienie na true
				/// a jesli nie, to znaczy, ze juz pora odpuscic sb te owce, ze juz wszystko przy niej zbadane
				///ojj obejscia sasiadow nie da sie zrobic juz w petli, tylko trzeba w swiadomym ifie
				if(stara_liczba1-1>=1 && stara_liczba2-1>=1 && plansza.Kratka[stara_liczba1-1][stara_liczba2-1]!=5 && plansza.Kratka[stara_liczba1-1][stara_liczba2-1]!=6) /// dopoki wybierane pole jest juz bez szans na trafienie lub przed chwila trafione w ramach odkrywanej wlasnie owcy
				{
					liczba1=stara_liczba1-1;
					liczba2=stara_liczba2-1;
					zostal_niespr_sasiad=true;
				}
				else
				{
					if(stara_liczba2-1>=1 && plansza.Kratka[stara_liczba1][stara_liczba2-1]!=5 && plansza.Kratka[stara_liczba1-1][stara_liczba2-1]!=6)
					{
						liczba1=stara_liczba1;
						liczba2=stara_liczba2-1;
						zostal_niespr_sasiad=true;
					}
					else
					{
						if(stara_liczba1+1<s1 && stara_liczba2-1>=1 && plansza.Kratka[stara_liczba1+1][stara_liczba2-1]!=5 && plansza.Kratka[stara_liczba1-1][stara_liczba2-1]!=6)
						{
							liczba1=stara_liczba1+1;
							liczba2=stara_liczba2-1;
							zostal_niespr_sasiad=true;
						}
						else
						{
							if(stara_liczba1-1>=1 && plansza.Kratka[stara_liczba1-1][stara_liczba2]!=5 && plansza.Kratka[stara_liczba1-1][stara_liczba2-1]!=6)
							{
								liczba1=stara_liczba1-1;
								liczba2=stara_liczba2;
								zostal_niespr_sasiad=true;
							}
							else
							{
								if(stara_liczba1+1<s1 && plansza.Kratka[stara_liczba1+1][stara_liczba2]!=5 && plansza.Kratka[stara_liczba1-1][stara_liczba2-1]!=6)
								{
									liczba1=stara_liczba1+1;
									liczba2=stara_liczba2;
									zostal_niespr_sasiad=true;
								}
								else
								{
									if(stara_liczba1-1>1 && stara_liczba2+1<s1 && plansza.Kratka[stara_liczba1-1][stara_liczba2+1]!=5 && plansza.Kratka[stara_liczba1-1][stara_liczba2-1]!=6)
									{
										liczba1=stara_liczba1-1;
										liczba2=stara_liczba2+1;
										zostal_niespr_sasiad=true;
									}
									else
									{
										if(stara_liczba2+1<s1 && plansza.Kratka[stara_liczba1][stara_liczba2+1]!=5 && plansza.Kratka[stara_liczba1-1][stara_liczba2-1]!=6)
										{
											liczba1=stara_liczba1;
											liczba2=stara_liczba2+1;
											zostal_niespr_sasiad=true;
										}
										else
										{
											if(stara_liczba1+1<s1 && stara_liczba2+1<s1 && plansza.Kratka[stara_liczba1+1][stara_liczba2+1]!=5 && plansza.Kratka[stara_liczba1-1][stara_liczba2-1]!=6)
											{
												liczba1=stara_liczba1+1;
												liczba2=stara_liczba2+1;
												zostal_niespr_sasiad=true;
											}
										}
									}
								}
							}
						}
					}
				}
				if(zostal_niespr_sasiad==false)
				{
					ile_sprawdzonych++;
				}
			}
			//System.out.println(liczba1+1);
			//System.out.println(liczba2);
			numer_stada=plansza.Kratka[liczba1][liczba2];
			plansza.Kratka[liczba1][liczba2]=5; ///dopiero po ustaleniu numeru statku moge tu sb zakryc wartosc nowym oznaczeniem, odznaczam 5, zeby nie pytac znow o to samo


			switch(numer_stada)
			{
				case 1: First.trafienie(); WolfScore++; break;
				case 2: Second.trafienie(); WolfScore++; break;
				case 3: Third.trafienie(); WolfScore++; break;
				case 4: Fourth.trafienie(); WolfScore++; break;
				default:
				{
					//System.out.println("Pudlo!");
				}
			}

			///wszystkie mozliwe "niepudla" zlapie w jednym ifie, zeby nie pisac w czterech case'ach tego samego
			if(numer_stada!=0 && numer_stada!=5 && numer_stada!=6)
			{
				if(l_owiec==0)
				{
					a1=liczba1;
					a2=liczba2;
				}
				if(l_owiec==1)
				{
					b1=liczba1;
					b2=liczba2;
				}
				if(l_owiec==2)
				{
					c1=liczba1;
					c2=liczba2;
				}
				if(l_owiec==3)
				{
					d1=liczba1;
					d2=liczba2;
				}

				l_owiec++;

			}

			if(l_owiec==docelowa_l_owiec) ///moge skorzystac z porownania do Kratki, bo
			///user tez dowiaduje sie o odkryciu calego stada od programu, tak samo Wilk ma prawo sie dowiedziec, to porownanie
			/// jest takie samo jak w metodzie trafienie(), tylko ze Wilk nie odczyta komuniaktu o trafieniu, ktory ta metoda
			/// generuje, wiec w ten sposob go informuję
			{
				//TO PRZENOSZE NIZEJ
	            /*///jesli ostal sie false, tzn., ze juz okolice stada zbadane i nic wiecej przy nim nie znajde
		///resetujemy zmienne i sprawdzamy jaki teraz jest maks_owiec, sasiednie pola stada ustawiamy piatkami
	            l_masztow=0; a1=0; a2=0; b1=0; b2=0; c1=0; c2=0; d1=0; d2=0, ile_sprawdzonych=0;
	            poprzedni_zatopiony=true;///!!!!!!!!!!!!!!!!!!!!!!!!!*/

		//zostal_niespr_sasiad==false; /// jesli weszlam do tego ifa dzieki warunkowi sprzed || (pierwszemu warunkowi), to to ustalam na false, bo moze jeszcze nie byc ustawione

		/// sasiednie pola okretu zakrywamy piatkami (on sam jest juz zakryty), zeby  sie juz nie pytac, bo wiemy, ze tam nie znajdziemy statku usera
				for(int u=1; u<=l_owiec; u++)
				{
					///mozemy wykorzystac tu liczba1 i liczba2, bo  te zmienne sa w tym momencie nie uzywane do niczego innego akurat
					if(u==1)
					{
						liczba1=a1;
						liczba2=a2;
					}
					if(u==2)
					{
						liczba1=b1;
						liczba2=b2;
					}
					if(u==3)
					{
						liczba1=c1;
						liczba2=c2;
					}
					if(u==4)
					{
						liczba1=d1;
						liczba2=d2;
					}

					if(liczba1-1<s1 && liczba2-1<s1 && liczba1-1>=1 && liczba2-1>=1)///zeby nie zawiesic, wychodzac za tablice
						plansza.Kratka[liczba1-1][liczba2-1]=5;
					if(liczba1<s1 && liczba2-1<s1 && liczba1>=1 && liczba2-1>=1)
						plansza.Kratka[liczba1][liczba2-1]=5;
					if(liczba1+1<s1 && liczba2-1<s1 && liczba1+1>=1 && liczba2-1>=1)
						plansza.Kratka[liczba1+1][liczba2-1]=5;
					if(liczba1-1<s1 && liczba2<s1 && liczba1-1>=1 && liczba2>=1)
						plansza.Kratka[liczba1-1][liczba2]=5;
					if(liczba1+1<s1 && liczba2<s1 && liczba1+1>=1 && liczba2>=1)
						plansza.Kratka[liczba1+1][liczba2]=5;
					if(liczba1-1<s1 && liczba2+1<s1 && liczba1-1>=1 && liczba2+1>=1)
						plansza.Kratka[liczba1-1][liczba2+1]=5;
					if(liczba1<s1 && liczba2+1<s1 && liczba1>=1 && liczba2+1>=1)
						plansza.Kratka[liczba1][liczba2+1]=5;
					if(liczba1+1<s1 && liczba2+1<s1 && liczba1+1>=1 && liczba2+1>=1)
						plansza.Kratka[liczba1+1][liczba2+1]=5;
				}
				//jesli ostal sie false, tzn., ze juz okolice statku zbadane i nic wiecej przy nim nie znajde
				///resetujemy zmienne i sprawdzamy jaki teraz jest maks_masztow, sasiednie pola okretu ustawiamy piatkami
				l_owiec=0; a1=1; a2=1; b1=1; b2=1; c1=1; c2=1; d1=1; d2=1; ile_sprawdzonych=0;
				poprzednia_trafiona=true;///!!!!!!!!!!!!!!!!!!!!!!!!!
			}

	}

	public static void main(String[] arg)
	{
		Game Gierka = new Game(10,"Ryba");
		//Gierka.ruchy();
	}
}
